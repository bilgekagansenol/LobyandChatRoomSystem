{
  "info": {
    "name": "🎮 Premium Chat Lobby - Working Collection v2",
    "description": "✅ **WORKING API Collection** - Port 8001 ✅\n\n🎯 **Demo Users Ready:**\n- **Premium Users**: premium_user_1, premium_user_2 (password: testpass123)\n- **Normal Users**: user_1, user_2, user_3, user_4, user_5 (password: testpass123)\n\n🚀 **Quick Start:**\n1. 🔐 Login with premium_user_1\n2. 📋 List existing lobbies (3 pre-seeded)\n3. ➕ Create new lobby (Premium only)\n4. 💬 Send messages\n5. 🛡️ Test moderation\n\n⚡ **Auto Features:**\n- JWT tokens auto-saved\n- Lobby ID auto-captured\n- Error handling included\n\n📍 **Server:** http://localhost:8001",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {
      "major": 2,
      "minor": 0,
      "patch": 0
    }
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8001/api",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "lobby_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "3",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔐 Quick Start - Login Premium User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Login Success', () => {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('access_token', response.access);",
              "    pm.collectionVariables.set('refresh_token', response.refresh);",
              "    console.log('✅ Tokens saved! Ready to test other endpoints.');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"premium_user_1\",\n  \"password\": \"testpass123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/login/",
          "host": ["{{base_url}}"],
          "path": ["auth", "login", ""]
        },
        "description": "🚀 **START HERE** - Login with premium user to get JWT tokens"
      }
    },
    {
      "name": "👤 My Profile",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/me/",
          "host": ["{{base_url}}"],
          "path": ["me", ""]
        },
        "description": "Get current user profile and verify premium status"
      }
    },
    {
      "name": "📋 List All Lobbies",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Lobbies Retrieved', () => {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    if (response.results && response.results.length > 0) {",
              "        pm.collectionVariables.set('lobby_id', response.results[0].id.toString());",
              "        console.log(`✅ Found ${response.count} lobbies. First lobby ID: ${response.results[0].id}`);",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", ""]
        },
        "description": "Get all available lobbies (3 pre-seeded lobbies available)"
      }
    },
    {
      "name": "➕ Create New Lobby",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Lobby Created', () => {",
              "    pm.expect(pm.response.code).to.eql(201);",
              "});",
              "",
              "if (pm.response.code === 201) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('lobby_id', response.id.toString());",
              "    console.log(`✅ New lobby created! ID: ${response.id}, Name: ${response.name}`);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"My Awesome Gaming Lobby\",\n  \"is_public\": true,\n  \"max_participants\": 10\n}"
        },
        "url": {
          "raw": "{{base_url}}/lobbies/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", ""]
        },
        "description": "Create a new lobby (Premium users only)"
      }
    },
    {
      "name": "🏠 Get Lobby Details",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", ""]
        },
        "description": "Get detailed info about a lobby including members and recent messages"
      }
    },
    {
      "name": "🚪 Join Lobby",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/join/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "join", ""]
        },
        "description": "Join the selected lobby"
      }
    },
    {
      "name": "💬 Send Message",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"content\": \"Hello everyone! Testing the chat system 🎮\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/messages/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "messages", ""]
        },
        "description": "Send a message to the lobby"
      }
    },
    {
      "name": "📨 List Messages",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/messages/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "messages", ""]
        },
        "description": "Get all messages in the lobby"
      }
    },
    {
      "name": "🔍 Search Lobbies",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/?search=gaming",
          "host": ["{{base_url}}"],
          "path": ["lobbies", ""],
          "query": [
            {
              "key": "search",
              "value": "gaming",
              "description": "Search in lobby names"
            }
          ]
        },
        "description": "Search lobbies by name"
      }
    },
    {
      "name": "🔒 Filter Public Open Lobbies",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/?public=1&status=open",
          "host": ["{{base_url}}"],
          "path": ["lobbies", ""],
          "query": [
            {
              "key": "public",
              "value": "1"
            },
            {
              "key": "status",
              "value": "open"
            }
          ]
        },
        "description": "Filter only public and open lobbies"
      }
    },
    {
      "name": "🎮 Start Game",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/start/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "start", ""]
        },
        "description": "Start the game (Owner only)"
      }
    },
    {
      "name": "✏️ Update Lobby",
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Updated Lobby Name\",\n  \"max_participants\": 12\n}"
        },
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", ""]
        },
        "description": "Update lobby settings (Owner only)"
      }
    },
    {
      "name": "🚶 Leave Lobby",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/leave/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "leave", ""]
        },
        "description": "Leave the current lobby"
      }
    },
    {
      "name": "👢 Kick User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": {{user_id}},\n  \"reason\": \"Inappropriate behavior\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/kick/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "kick", ""]
        },
        "description": "Kick a user from lobby (Owner/Moderator only)"
      }
    },
    {
      "name": "🚫 Ban User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": {{user_id}},\n  \"reason\": \"Repeated violations\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/ban/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "ban", ""]
        },
        "description": "Ban a user permanently (Owner/Moderator only)"
      }
    },
    {
      "name": "✅ Unban User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": {{user_id}}\n}"
        },
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/unban/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "unban", ""]
        },
        "description": "Remove ban from user"
      }
    },
    {
      "name": "⭐ Add Moderator",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": {{user_id}}\n}"
        },
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/add_moderator/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "add_moderator", ""]
        },
        "description": "Promote user to moderator (Owner only)"
      }
    },
    {
      "name": "⭐ Remove Moderator",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": {{user_id}}\n}"
        },
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/remove_moderator/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "remove_moderator", ""]
        },
        "description": "Demote moderator to regular member"
      }
    },
    {
      "name": "👑 Transfer Ownership",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": {{user_id}}\n}"
        },
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/transfer_ownership/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "transfer_ownership", ""]
        },
        "description": "Transfer lobby ownership to another member"
      }
    },
    {
      "name": "🔒 Close Lobby",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/close/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "close", ""]
        },
        "description": "Close the lobby (Owner only)"
      }
    },
    {
      "name": "📝 Register New User",
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"newuser123\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"newpass123\",\n  \"password_confirm\": \"newpass123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/register/",
          "host": ["{{base_url}}"],
          "path": ["auth", "register", ""]
        },
        "description": "Register a new user account"
      }
    },
    {
      "name": "🔄 Refresh Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('access_token', response.access);",
              "    console.log('✅ Token refreshed successfully');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"refresh\": \"{{refresh_token}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/refresh/",
          "host": ["{{base_url}}"],
          "path": ["auth", "refresh", ""]
        },
        "description": "Refresh access token using refresh token"
      }
    },
    {
      "name": "✏️ Update Profile",
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"updated@example.com\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/me/",
          "host": ["{{base_url}}"],
          "path": ["me", ""]
        },
        "description": "Update user profile information"
      }
    },
    {
      "name": "🗑️ Delete Message",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/lobbies/{{lobby_id}}/messages/1/",
          "host": ["{{base_url}}"],
          "path": ["lobbies", "{{lobby_id}}", "messages", "1", ""]
        },
        "description": "Soft delete a message (Owner/Moderator or sender only)"
      }
    },
    {
      "name": "🔑 Login - Normal User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('access_token', response.access);",
              "    pm.collectionVariables.set('refresh_token', response.refresh);",
              "    console.log('✅ Normal user logged in');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"user_1\",\n  \"password\": \"testpass123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/login/",
          "host": ["{{base_url}}"],
          "path": ["auth", "login", ""]
        },
        "description": "Login with normal user (non-premium) to test limitations"
      }
    }
  ],
  "event": [
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global error handling",
          "pm.test('No Server Error (500)', () => {",
          "    pm.expect(pm.response.code).to.not.eql(500);",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log(`❌ Error ${pm.response.code}: ${pm.response.text()}`);",
          "} else {",
          "    console.log(`✅ Success ${pm.response.code}`);",
          "}"
        ]
      }
    }
  ]
}